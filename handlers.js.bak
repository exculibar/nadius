const radius = require('radius');
const http = require('http');

class AuthHandler {
    constructor(msg, secret) {
        this.packet = radius.decode({packet: msg, secret});
        this.secret = secret;
    }

    username() {
        return this.packet.attributes['User-Name'];
    }

    _getPassword() {
        let options = {
            host: 'localhost',
            port: 3000,
            path: '',
        };

        let data = '';
        return new Promise((resolve, reject) => {
            let req = http.request(options, res => {
                res.on('data', chunk => {
                    data += chunk;
                });

                res.on('end', () => {
                    resolve({result: true, data: data});
                });
            });

            req.on('error', err => {
                resolve({result: false, message: e.message});
            });

            req.end();
        })
    }

    async getPassword() {
        this.password = await this._getPassword();
        return this.password;
    }

    check() { return false; }

    makeResponse() { return null; }
}

class PAPAuthHandler extends AuthHandler {
    check() {

    }

    makeResponse() {

    }
}

class CHAPAuthHandler extends AuthHandler {

}

class MSCHAPv1AuthHandler extends AuthHandler {

}

class MSCHAPv2AuthHandler extends AuthHandler {
    check() {

    }

    makeResponse() {

    }
}